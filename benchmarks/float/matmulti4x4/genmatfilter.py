from jinja2 import Template
import numpy as np
precision = 1
min = 1
max = 100
import numpy as np

#num_matrices = 10  # Number of matrices you want to generate
#precision = 20  # Number of decimal places
#matrices = []

def genmat():
    for _ in range(num_matrices):
        matrix = np.random.rand(4, 4)
        matrix = np.round(matrix, precision)
        matrix_list = matrix.tolist()
        matrices.append(matrix_list)
    return format_matrices(matrices)

def filter_matrices(matrices):
    for matrix in matrices:
        yield np.clip(matrix, min, max)

def format_matrices(matrices):
    # Convert to string with appropriate formatting
    formatted_matrices = []
    for matrix in matrices:
        formatted_matrix = "[\n"
        for row in matrix:
            formatted_row = "    [" + ", ".join(f"{x:.{precision}f}" for x in row) + "],\n"
            formatted_matrix += formatted_row
        formatted_matrix += "]"
        formatted_matrices.append(formatted_matrix)
    return formatted_matrices

matrices = [
    [[8, 3, 2, 4],[2, 7, 4, 5],[0, 1, 2, 3],[0, 1, 2, 3]],
    [[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12],[13, 14, 15, 16]],
    [[17, 18, 19, 20],[21, 22, 23, 24],[25, 26, 27, 28],[29, 30, 31, 32]],
    [[33, 34, 35, 36],[37, 38, 39, 40],[41, 42, 43, 44],[45, 46, 47, 48]],
    [[49, 50, 51, 52],[53, 54, 55, 56],[57, 58, 59, 60],[61, 62, 63, 64]],
    [[65, 66, 67, 68],[69, 70, 71, 72],[73, 74, 75, 76],[77, 78, 79, 80]],
    [[0.12, 0.45, 0.67, 0.89], [1.23, 4.56, 7.89, 0.12], [3.45, 6.78, 9.01, 2.34], [5.67, 8.90, 1.23, 4.56]],
    [[7.12, 8.34, 9.56, 0.78], [1.91, 2.34, 5.67, 8.90], [1.12, 3.45, 6.78, 9.01], [2.34, 5.67, 8.90, 1.23]],
    [[4.56, 7.89, 0.12, 3.45], [6.78, 9.01, 2.34, 5.67], [8.90, 1.23, 4.56, 7.89], [0.12, 3.45, 6.78, 9.01]],
    [[2.34, 5.67, 8.90, 1.23], [4.56, 7.89, 0.12, 3.45], [6.78, 9.01, 2.34, 5.67], [8.90, 1.23, 4.56, 7.89]],
    [[0.12, 3.45, 6.78, 9.01], [2.34, 5.67, 8.90, 1.23], [4.56, 7.89, 0.12, 3.45], [6.78, 9.01, 2.34, 5.67]],
    [[8.90, 1.23, 4.56, 7.89], [0.12, 3.45, 6.78, 9.01], [2.34, 5.67, 8.90, 1.23], [4.56, 7.89, 0.12, 3.45]],
    [[6.78, 9.01, 2.34, 5.67], [8.90, 1.23, 4.56, 7.89], [0.12, 3.45, 6.78, 9.01], [2.34, 5.67, 8.90, 1.23]],
    [[4.56, 7.89, 0.12, 3.45], [6.78, 9.01, 2.34, 5.67], [8.90, 1.23, 4.56, 7.89], [0.12, 3.45, 6.78, 9.01]],
    [[2.34, 5.67, 8.90, 1.23], [4.56, 7.89, 0.12, 3.45], [6.78, 9.01, 2.34, 5.67], [8.90, 1.23, 4.56, 7.89]],
    [[0.12, 3.45, 6.78, 9.01], [2.34, 5.67, 8.90, 1.23], [4.56, 7.89, 0.12, 3.45], [6.78, 9.01, 2.34, 5.67]],
    [[9.87, 4.32, 1.09, 7.65], [2.98, 5.43, 8.76, 1.23], [4.56, 7.89, 0.11, 3.44], [6.77, 9.00, 2.33, 5.66]],
    [[3.21, 6.54, 9.87, 1.20], [4.53, 7.86, 0.19, 3.52], [6.85, 9.18, 2.51, 5.84], [8.17, 0.50, 4.83, 7.16]],
    [[1.49, 4.82, 8.15, 0.48], [3.81, 7.14, 0.47, 3.80], [6.13, 9.46, 2.79, 6.12], [8.45, 1.78, 5.11, 8.44]],
    [[0.77, 4.10, 7.43, 0.76], [3.09, 6.42, 9.75, 3.08], [5.41, 8.74, 2.07, 5.40], [7.73, 1.06, 4.39, 7.72]],
    [[2.05, 5.38, 8.71, 1.04], [4.37, 7.70, 0.03, 4.36], [6.69, 9.02, 2.35, 6.68], [8.01, 1.34, 4.67, 8.00]],
    [[3.33, 6.66, 9.99, 1.32], [4.65, 7.98, 1.31, 4.64], [6.97, 9.30, 2.63, 6.96], [9.29, 1.62, 4.95, 9.28]],
    [[1.61, 4.94, 8.27, 0.60], [3.93, 7.26, 0.59, 3.92], [6.25, 9.58, 2.91, 6.24], [8.57, 1.90, 5.23, 8.56]],
    [[0.89, 4.22, 7.55, 0.88], [3.21, 6.54, 9.87, 3.20], [5.53, 8.86, 2.19, 5.52], [7.85, 1.18, 4.51, 7.84]],
    [[2.17, 5.50, 8.83, 1.16], [4.49, 7.82, 1.15, 4.48], [6.81, 9.14, 2.47, 6.80], [9.13, 1.46, 4.79, 9.12]],
    [[3.45, 6.78, 0.11, 3.44], [5.77, 9.10, 2.43, 5.76], [8.09, 0.42, 4.75, 8.08], [0.41, 3.74, 7.07, 0.40]],
[
    [028.457546132827105101, 0.88627381330549304117, 0.40320221937108335908, 0.30618816153541617009],
    [024.348777186925174565, 0.50072784147668758514, 0488.42330783646209502, 019.709424381285589600],
    [033.713629192588301375, 0.91693290018374307149, 0086.21385671306092124, 078.770454526290512032],
    [099.145116252088472120, 0.30059001519913997047, 0.42804717767327410405, 064.424647755355002321],
],
[
    [0.48030881806754244234, 0.90259649449860590575, 0.67413645718059722611, 0.20232363120920468513],
    [0.36622239101634967984, 0.89406270127513465251, 0.95325893823456808729, 0064.21372832690142030],
    [0.24466327506236373868, 0.79081601532482548311, 0.75953013298928062635, 088.266074171091057909],
    [0.41575699163745793996, 0.23821703956939355162, 05.8730964538244068152, 09.3577202842527273940],
],
[
    [0.43989503735275387042, 086.580910933685562014, 0.92210690549369112023, 0.82728956316327195708],
    [0.33625499552846527251, 009.078152680887840997, 026.865781289550894062, 0.85192843333728907051],
    [046.296983660445939490, 005.022771089161170988, 038.981476933462932966, 0.67712015876507769541],
    [011.654404309526489314, 0359.54340499047654500, 093.342708656642436882, 0.46231808668802909512],
],
[
    [0.36831544802535831629, 053.198852149162323411, 0.01728710620287032818, 021.467245598830841935],
    [016.196980816140538195, 09.5281720171188366564, 033.964868821846072588, 047.546474995776200068],
    [0096.78521232130721241, 077.746869576090238407, 06.3808430124154613683, 05.3161913932088511459],
    [059.829189622507294999, 0029.30590131640231286, 0.80741837880772915348, 0.92115142723527643209],
],
[
    [013.573288328419841342, 0.24368095411816059759, 0.32119334495243034855, 0.26450568384973138780],
    [048.174270084699799543, 004.291930261229626176, 0.47157097095133587716, 035.838537690657223944],
    [077.553803969512746797, 0924.08995983327890666, 0.63204407523033578897, 0688.03668226751812931],
    [017.434141787231605125, 086.691470925322711150, 0.32403871366539904741, 04.071477366476827786],
],
[
    [01.4753592794468339822, 0.37806407892282123395, 025.802388694408040504, 0.15776691010362897671],
    [075.505246838259265640, 0252.12892065216507831, 062.750681288657339518, 016.400453516603197279],
    [06.6443125157348081888, 040.209692978091393645, 030.590717432995662151, 00421.5241442327544164],
    [0638.19395843850812433, 04.0249830989915769131, 0.11770185928804044462, 0.64643350018143419522],
],
[
    [0.35923563112553247301, 0.68424507553533164828, 0.75062910406187488555, 0.70337448879700925630],
    [098.750268901617577200, 0.10553122798450743913, 0.51443500172643952251, 0.68988281040887666773],
    [012.312974174209968814, 012.200042713941117167, 0.88343121075045694113, 0.48611329760158766833],
    [0.15648740315474041207, 009.424294560749713057, 0.37418994981271902489, 0.35703367974888411407],
],
[
    [040.681021366070896361, 0.78620457480967287367, 0.68495447465686920552, 0.83102289006824336948],
    [093.123388778495164164, 044.595250556622301197, 015.935476842946916243, 017.258688305065117419],
    [075.033536303401315859, 03.2787262043919784826, 039.514666005546550398, 054.373254260484937816],
    [078.765577262333230646, 088.051572263529320761, 0.10630017474477526651, 07.3095618076293988885],
],
[
    [0.50792803247678042222, 0.56827175626472137271, 012.678695892539348922, 055.943568334025495226],
    [07.8925031930876643482, 052.617888485160624334, 07.9965982298913795834, 035.414076210837253100],
    [026.044776325265950323, 023.478698236881204164, 07.6698617153691495130, 039.335203319833256241],
    [07.4837189726470898510, 003.186591535360372429, 03.4182671149417553913, 061.461244418348870422],
],
[
    [07.4258329256046085032, 041.690374497873239346, 00198.7092206255436366, 02.7300830543424725594],
    [08.3326637938900682823, 025.703433984650458921, 007.093626648498130294, 09.1022274932270630377],
    [059.582503579951373585, 066.916322732387678585, 0213.09321101146705413, 041.487854039487981339],
    [043.132289448645944052, 02.6974375677529716100, 02.2308283356038438594, 059.828569565852096623],
]
]

matrices = filter_matrices(matrices)
print(matrices)
#formatted_matrices = genmat()
formatted_matrices = format_matrices(matrices)

# Print or store the formatted matrices
for i, formatted_matrix in enumerate(formatted_matrices):
    #print(f"Matrix {i + 1}:\n{formatted_matrix}\n")
    print(f"{formatted_matrix},")
