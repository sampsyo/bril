# Utilizes the mod function and a modified version of the bitwise_or found in 
# adler32 benchmark. Also uses the leftshift, rightshift, and pow from 
# the bitshift benchmark

# ARGS: 123456789 57648

# Calculate the modulo of the two numbers using arithmetic
@mod(r: int, s: int): int {
  x: int = div r s;
  y: int = mul x s;
  result: int = sub r y;
  ret result;
}

# taken from bitshift benchmark
@pow(x: int, n: int): int {
  v1: int = id n;
  v2: int = const 1;
  v3: bool = eq v1 v2;
  br v3 .then.0 .else.0;
.then.0:
  v4: int = id x;
  ret v4;
.else.0:
  v5: int = id x;
  v6: int = id n;
  v7: int = const 2;
  v8: int = div v6 v7;
  half: int = call @pow v5 v8;
  half: int = id half;
  v9: int = id half;
  v10: int = id half;
  v11: int = mul v9 v10;
  half2: int = id v11;
  v13: int = id n;
  v14: int = const 2;
  v15: int = call @mod v13 v14;
  v16: int = const 1;
  v17: bool = eq v15 v16;
  br v17 .then.12 .else.12;
.then.12:
  v18: int = id half2;
  v19: int = id x;
  v20: int = mul v18 v19;
  ans: int = id v20;
  jmp .endif.12;
.else.12:
  v21: int = id half2;
  ans: int = id v21;
.endif.12:
  v22: int = id ans;
  ret v22;
}

@LEFTSHIFT(x: int, step: int): int {
  v0: int = const 2;
  v1: int = id step;
  p: int = call @pow v0 v1;
  p: int = id p;
  v2: int = id x;
  v3: int = id p;
  v4: int = mul v2 v3;
  ret v4;
}

@RIGHTSHIFT(x: int, step: int): int {
  v0: int = const 2;
  v1: int = id step;
  p: int = call @pow v0 v1;
  p: int = id p;
  v2: int = id x;
  v3: int = id p;
  v4: int = div v2 v3;
  ret v4;
}


# Calculate the bitwise AND of two numbers using arithmetic
@bitwise_and(x: int, y: int): int {
  one: int = const 1;
  two: int = const 2;
  val: int = const 1;
  zero: int = const 0;
  result: int = const 0;
.loop:
  xmod2: int = call @mod x two;
  ymod2: int = call @mod y two;
  xodd: bool = eq xmod2 one;
  yodd: bool = eq ymod2 one;
  cond: bool = and xodd yodd;
  br cond .true .false;
.true:
  result: int = add result val;
.false:
  x: int = div x two;
  y: int = div y two;
  xpos: bool = gt x zero;
  ypos: bool = gt y zero;
  val: int = mul val two;
  continue: bool = or xpos ypos;
  br continue .loop .exit;
.exit:
  ret result;
}

# Calculates the number of bits in a
@calc_size(a: int): int {
  zero: int = const 0;
  one: int = const 1;
  result: int = const 0;
  .check: 
    cond: bool = gt a zero;
    br cond .loop .end;
  .loop:
    a: int = call @RIGHTSHIFT a one;
    result: int = add result one;
    jmp .check;
  .end:
    ret result;
}

@karatsuba(a:int, b:int):int {
  two: int = const 2;
  b1: bool = lt a two;
  b2: bool = lt b two;
  cond: bool = or b1 b2;
  br cond .base_case .recursive;
  .recursive:
    size_a: int = call @calc_size a;
    size_b: int = call @calc_size b;
    condd: bool = ge a b;
    br condd .a_greater .b_greater;
    .a_greater:
      split: int = div size_a two;
      jmp .cont;
    .b_greater:
      split: int = div size_b two;
    .cont: 
      one: int = const 1;
      all_ones: int = const -1;
      high_mask: int = call @LEFTSHIFT all_ones split; 
      temp_mask: int = call @pow two split;
      low_mask: int = sub temp_mask one;
      a_high: int = call @RIGHTSHIFT a split;
      b_high: int = call @RIGHTSHIFT b split;
      a_low: int = call @bitwise_and a low_mask;
      b_low: int = call @bitwise_and b low_mask;
      z0: int = call @karatsuba a_low b_low;
      a_plus: int = add a_high a_low;
      b_plus: int = add b_high b_low;
      z1: int = call @karatsuba a_plus b_plus;
      z2: int = call @karatsuba a_high b_high;
      pow_one: int = mul split two;
      first_term : int = call @LEFTSHIFT z2 pow_one;
      temp: int = sub z1 z2;
      temp: int = sub temp z0;
      second_term : int = call @LEFTSHIFT temp split;
      temp: int = add first_term second_term;
      final: int = add temp z0;
      ret final;

  .base_case:
    final: int = mul a b;
    ret final;
}

@main(a: int, b:int) {
  res: int = call @karatsuba a b;
  print res;
}