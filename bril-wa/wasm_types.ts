// types that specify binary encoding of WASM types
type U32 = number;

enum NumTypeEnc {
  i32 = 0x7F,
  i64 = 0x7E,
  f32 = 0x7D,
  f64 = 0x7C,
}

enum VecTypeEnc {
  Vectype = 0x7B
}

enum RefTypeEnc {
  Funcref = 0x70,
  Externref = 0x6F
}
type UnboundedLimit = { min: U32 }
type BoundedLimit = { min: U32, max: U32 }

enum LimitEnc {
  UnboundedLimit = 0x00,
  BoundedLimit = 0x01
}

enum MutEnc {
  Const = 0x00,
  Var = 0x01
}

enum ValueTypeEnc {
  i32 = 0x7F,
  i64 = 0x7E,
  f32 = 0x7D,
  f64 = 0x7C,
  Vectype = 0x7B,
  Funcref = 0x70,
  Externref = 0x6F
}

type ResultTypeEnc = [ValueTypeEnc]

type FuncTypeEnc = { params: [ResultTypeEnc], results: [ResultTypeEnc] }

type MemTypeEnc = { lim: LimitEnc }

type TableTypeEnc = { et: RefTypeEnc, lim: LimitEnc }

type GlobalTypeEnc = {
  mut: MutEnc, t: ValueTypeEnc
}

enum BlockTypeEnc {
  Empty = 0x40,
}
// types that specify encoding for instructions
enum OpCodeEnc {
  Unreachable = 0x00,
  Nop = 0x01,
  Block = 0x02,
  Loop = 0x03,
  If = 0x04,
  Else = 0x05,
  Br = 0x0C,
  BrIf = 0x0D,
  BrTable = 0x0E,
  Ret = 0x0F,
  Call = 0x10,
  CallIndirect = 0x11,

  RefNull = 0xD0,
  RefIsNull = 0xD1,
  RefFunc = 0xD2,
  Drop = 0x1A,
  Select = 0x1B,
  Selectt = 0x1c,
  LGet = 0x20,
  LSet = 0x21,
  LTee = 0x22,
  GGet = 0x23,
  GSet = 0x24,

  Loadi32 = 0x28,
  Loadi64 = 0x29,
  Loadf32 = 0x2A,
  Loadf64 = 0x2B,
  Load8si32 = 0x2C,
  Load8ui32 = 0x2D,
  Load16si32 = 0x2E,
  Load16ui32 = 0x2F,
  Load8si64 = 0x30,
  Load8ui64 = 0x31,
  Load16si64 = 0x32,
  Load16ui64 = 0x33,
  Load32si64 = 0x34,
  Load32ui64 = 0x35,
  Storei32 = 0x36,
  Storei64 = 0x37,
  Storef32 = 0x38,
  Storef64 = 0x39,
  Store8i32 = 0x3A,
  Store16i32 = 0x3B,
  Store8i64 = 0x3C,
  Store16i64 = 0x3D,
  Store32i64 = 0x3E,
  MemSize = 0x3F,
  MemGrow = 0x40,
  MemInit = 0xFC,
  DataDrop = 0xFC,
  MemCopy = 0xFC,
  MemFill = 0xFC,

  Consti32 = 0x41,
  Consti64 = 0x42,
  Constf32 = 0x43,
  Constf64 = 0x44,
  Eqzi32 = 0x45,
  Eqi32 = 0x46,
  NEi32 = 0x47,
  LTsi32 = 0x48,
  LTui32 = 0x49,
  GTsi32 = 0x4A,
  GTui32 = 0x4B,
  LEsi32 = 0x4C,
  LEui32 = 0x4D,
  GEsi32 = 0x4E,
  GEui32 = 0x4F,

  Eqzi64 = 0x50,
  Eqi64 = 0x51,
  NEi64 = 0x52,
  LTsi64 = 0x53,
  LTui64 = 0x54,
  GTsi64 = 0x55,
  GTui64 = 0x56,
  LEsi64 = 0x57,
  LEui64 = 0x58,
  GEsi64 = 0x59,
  GEui64 = 0x5A,

  EQf32 = 0x5B,
  NEf32 = 0x5C,
  LTf32 = 0x5D,
  GTf32 = 0x5E,
  LEf32 = 0x5F,
  GEf32 = 0x60,

  EQf64 = 0x61,
  NEf64 = 0x62,
  LTf64 = 0x63,
  GTf64 = 0x64,
  LEf64 = 0x65,
  GEf64 = 0x66,

  CLZi32 = 0x67,
  CTZi32 = 0x68,
  PopCnti32 = 0x69,
  Addi32 = 0x6A,
  Subi32 = 0x6B,
  Muli32 = 0x6C,
  Divsi32 = 0x6D,
  Divui32 = 0x6E,
  Remsi32 = 0x6F,
  Remui32 = 0x70,
  ANDi32 = 0x71,
  ORi32 = 0x72,
  XORi32 = 0x73,
  SHLi32 = 0x74,
  SHRsi32 = 0x75,
  SHRui32 = 0x76,
  ROTLi32 = 0x77,
  ROTRi32 = 0x78,

  CLZi64 = 0x79,
  CTZi64 = 0x7A,
  PopCnti64 = 0x7B,
  Addi64 = 0x7C,
  Subi64 = 0x7D,
  Muli64 = 0x7E,
  Divsi64 = 0x7F,
  Divui64 = 0x80,
  Remsi64 = 0x81,
  Remui64 = 0x82,
  ANDi64 = 0x83,
  ORi64 = 0x84,
  XORi64 = 0x85,
  SHLi64 = 0x86,
  SHRsi64 = 0x87,
  SHRui64 = 0x88,
  ROTLi64 = 0x89,
  ROTRi64 = 0x8A,

  Absf32 = 0x8B,
  Megf32 = 0X8C,
  Ceilf32 = 0X8D,
  Floorf32 = 0X8E,
  Truncf32 = 0X8F,
  Nearestf32 = 0X90,
  Sqrtf32 = 0X91,
  Addf32 = 0X92,
  Subf32 = 0X93,
  Mulf32 = 0X94,
  Divf32 = 0X95,
  Minf32 = 0X96,
  Maxf32 = 0X97,
  CopySignf32 = 0X98,

  Absf64 = 0x99,
  Megf64 = 0X9A,
  Ceilf64 = 0X9B,
  Floorf64 = 0X9C,
  Truncf64 = 0X9D,
  Nearestf64 = 0X9E,
  Sqrtf64 = 0X9F,
  Addf64 = 0XA0,
  Subf64 = 0XA1,
  Mulf64 = 0XA2,
  Divf64 = 0XA3,
  Minf64 = 0XA4,
  Maxf64 = 0XA5,
  CopySignf64 = 0XA6,

  Wrapi32i64 = 0xA7,
  Truncf32i32s = 0xA8,
  Truncf32i32u = 0XA9,
  Truncf64i32s = 0XAA,
  Truncf64i32u = 0XAB,
  Extendi32i64s = 0XAC,
  Extendi32i64u = 0XAD,
  Truncf32i64s = 0XAE,
  Truncf32i64u = 0XAF,
  Truncf64i64s = 0XB0,
  Truncf64i64u = 0XB1,
  Converti32f32s = 0XB2,
  Converti32f32u = 0XB3,
  Converti64f32s = 0XB4,
  Converti64f32u = 0XB5,
  Demotef64f32 = 0XB6,
  Converti32f64s = 0XB7,
  Converti32f64u = 0XB8,
  Converti64f64s = 0XB9,
  Converti64f64u = 0XBA,
  Promotef32f64 = 0xBB,
  Reinterpretf32i32 = 0xBC,
  Reinterpretf64i64 = 0xBD,
  Reinterpreti32f32 = 0xBE,
  Reinterpreti64f64 = 0xBF,

  Extend8i32s = 0XC0,
  Extend16i32s = 0XC1,
  Extrend8i64s = 0XC2,
  Extend16i64s = 0XC3,
  Extend32i64s = 0XC4,

  TruncSatf32i32s = 0xFC,
  TruncSatf32i32u = 0xFC,
  TruncSatf64i32s = 0xFC,
  TruncSatf64i32u = 0xFC,
  TruncSatf32i64s = 0xFC,
  TruncSatf32i64u = 0xFC,
  TruncSatf64i64s = 0xFC,
  TruncSatf64i64u = 0xFC,

  //all others are 0xFD

  AllOthers = 0xFD,

  Load = 0xFD,
  Load88s = 0xFD,
  Load88u = 0xFD,
  Load164s = 0xFD,
  Load164u = 0xFD,
  Load322s = 0xFD,
  Load322u = 0xFD,
  LoadSplat8 = 0xFD,
  LoadSplat16 = 0xFD,
  LoadSplat32 = 0xFD,
  LoadSplat64 = 0xFD,
  LoadZero32 = 0xFD,
  LoadZero64 = 0xFD,
  Store = 0xFD,
  LoadLane8 = 0xFD,
  LoadLane16 = 0xFD,
  LoadLane32 = 0xFD,
  LoadLane64 = 0xFD,
  StoreLane8 = 0xFD,
  StoreLane16 = 0xFD,
  StoreLane32 = 0xFD,
  StoreLane64 = 0xFD,

  Const128 = 0xFD,
  Shuffle = 0xFD,

  ExtractLanei816s = 0xFD,
  ExtractLanei816u = 0xFD,
  ReplaceLanei816 = 0xFD,
  ExtractLanei168s = 0xFD,
  ExtractLanei168u = 0xFD,
  ReplaceLanei168 = 0xFD,
  ExtractLanei324 = 0xFD,
  ReplaceLanei324 = 0xFD,
  ExtractLanei642 = 0xFD,
  ReplaceLanei642 = 0xFD,
  ExtractLanef324 = 0xFD,
  ReplaceLanef324 = 0xFD,
  ExtractLanef642 = 0xFD,
  ReplaceLanef642 = 0xFD,

  Swizzle = 0xFD,
  Splati816 = 0xFD,
  Splati168 = 0xFD,
  Splati324 = 0xFD,
  Splati642 = 0xFD,
  Splatf324 = 0xFD,
  Splatf642 = 0xFD,

  EQi816 = 0xFD,
  NEi816 = 0xFD,
  LTsi816 = 0xFD,
  LTui816 = 0xFD,
  GTsi816 = 0xFD,
  GTui816 = 0xFD,
  LEsi816 = 0xFD,
  LEui816 = 0xFD,
  GEsi816 = 0xFD,
  GEui816 = 0xFD,
  
  EQi168 = 0xFD,
  NEi168 = 0xFD,
  LTsi168 = 0xFD,
  LTui168 = 0xFD,
  GTsi168 = 0xFD,
  GTui168 = 0xFD,
  LEsi168 = 0xFD,
  LEui168 = 0xFD,
  GEsi168 = 0xFD,
  GEui168 = 0xFD,

  EQi324 = 0xFD,
  NEi324 = 0xFD,
  LTsi324 = 0xFD,
  LTui324 = 0xFD,
  GTsi324 = 0xFD,
  GTui324 = 0xFD,
  LEsi324 = 0xFD,
  LEui324 = 0xFD,
  GEsi324 = 0xFD,
  GEui324 = 0xFD,

  EQi642 = 0xFD,
  NEi642 = 0xFD,
  LTsi642 = 0xFD,
  GTsi642 = 0xFD,
  LEsi642 = 0xFD,
  GEsi642 = 0xFD,

  EQf324 = 0xFD,
  NEf324 = 0xFD,
  LTsf324 = 0xFD,
  GTsf324 = 0xFD,
  LEsf324 = 0xFD,
  GEsf324 = 0xFD,

  EQf642 = 0xFD,
  NEf642 = 0xFD,
  LTsf642 = 0xFD,
  GTsf642 = 0xFD,
  LEsf642 = 0xFD,
  GEsf642 = 0xFD,

  NOT128 = 0xFD,
  AND128 = 0xFD,
  ANDNOT128 = 0xFD,
  OR128 = 0xFD,
  XOR128 = 0xFD,
  BitSelect128 = 0xFD,
  AnyTrue128 = 0xFD,

  ABSi816 = 0xFD,
  NEGi816 = 0xFD,
  PopCnti816 = 0xFD,
  AllTruei816 = 0xFD,
  Bitmaski816 = 0xFD,
  Narrowsi816 = 0xFD,
  Narrowui816 = 0xFD,
  SHLi816 = 0xFD,
  SHRsi816 = 0xFD,
  SHRui816 = 0xFD,
  ADDi816 = 0xFD,
  ADDSatsi816 = 0xFD,
  ADDSatui816 = 0xFD,
  SUBi816 = 0xFD,
  SUBSatsi816 = 0xFD,
  SUBSatui816 = 0xFD,
  MINsi816 = 0xFD,
  MINui816 = 0xFD,
  MAXsi816 = 0xFD,
  MAXui816 = 0xFD,
  AVGRui816 = 0xFD,

  ExtAddPairwisesi168 = 0xFD,
  ExtAddPairwiseui168 = 0xFD,
  ABSi168 = 0xFD,
  NEGi168 = 0xFD,
  MulrSatsi168 = 0xFD,
  AllTruei168 = 0xFD,
  Bitmaski168 = 0xFD,
  Narrowsi168 = 0xFD,
  Narrowui168 = 0xFD,
  ExtendLowsi168 = 0xFD,
  ExtendLowui168 = 0xFD,
  ExtendHighsi168 = 0xFD,
  ExtendHighui168 = 0xFD,
  SHLi168 = 0xFD,
  SHRsi168 = 0xFD,
  SHRui168 = 0xFD,
  ADDi168 = 0xFD,
  ADDSatsi168 = 0xFD,
  ADDSatui168 = 0xFD,
  SUBi168 = 0xFD,
  SUBSatsi168 = 0xFD,
  SUBSatui168 = 0xFD,
  MULi168 = 0xFD,
  MINsi168 = 0xFD,
  MINui168 = 0xFD,
  MAXsi168 = 0xFD,
  MAXui168 = 0xFD,
  AVGRui168 = 0xFD,
  ExtMulLowsi168 = 0xFD,
  ExtMulLowui168 = 0xFD,
  ExtMulHighsi168 = 0xFD,
  ExtMulHighui168 = 0xFD,


  ExtAddPairwisesi324 = 0xFD,
  ExtAddPairwiseui324 = 0xFD,
  ABSi324 = 0xFD,
  NEGi324 = 0xFD,
  AllTruei324 = 0xFD,
  Bitmaski324 = 0xFD,
  ExtendLowsi324 = 0xFD,
  ExtendLowui324 = 0xFD,
  ExtendHighsi324 = 0xFD,
  ExtendHighui324 = 0xFD,
  SHLi324 = 0xFD,
  SHRsi324 = 0xFD,
  SHRui324 = 0xFD,
  ADDi324 = 0xFD,
  SUBi324 = 0xFD,
  MULi324 = 0xFD,
  MINsi324 = 0xFD,
  MINui324 = 0xFD,
  MAXsi324 = 0xFD,
  MAXui324 = 0xFD,
  Doti324 = 0xFD,
  ExtMulLowsi324 = 0xFD,
  ExtMulLowui324 = 0xFD,
  ExtMulHighsi324 = 0xFD,
  ExtMulHighui324 = 0xFD,


  ABSi642 = 0xFD,
  NEGi642 = 0xFD,
  AllTruei642 = 0xFD,
  Bitmaski642 = 0xFD,
  ExtendLowsi642 = 0xFD,
  ExtendLowui642 = 0xFD,
  ExtendHighsi642 = 0xFD,
  ExtendHighui642 = 0xFD,
  SHLi642 = 0xFD,
  SHRsi642 = 0xFD,
  SHRui642 = 0xFD,
  ADDi642 = 0xFD,
  SUBi642 = 0xFD,
  MULi642 = 0xFD,
  ExtMulLowsi642 = 0xFD,
  ExtMulLowui642 = 0xFD,
  ExtMulHighsi642 = 0xFD,
  ExtMulHighui642 = 0xFD,


  Ceilf324 = 0xFD,
  Floorf324 = 0xFD,
  Truncf324 = 0xFD,
  Nearestf324 = 0xFD,
  Absf324 = 0xFD,
  Negf324 = 0xFD,
  Sqrtf324 = 0xFD,
  Addf324 = 0xFD,
  Subf324 = 0xFD,
  Mulf324 = 0xFD,
  Divf324 = 0xFD,
  Minf324 = 0xFD,
  Maxf324 = 0xFD,
  PMinf324 = 0xFD,
  PMaxf324 = 0xFD,


  Ceilf642 = 0xFD,
  Floorf642 = 0xFD,
  Truncf642 = 0xFD,
  Nearestf642 = 0xFD,
  Absf642 = 0xFD,
  Negf642 = 0xFD,
  Sqrtf642 = 0xFD,
  Addf642 = 0xFD,
  Subf642 = 0xFD,
  Mulf642 = 0xFD,
  Divf642 = 0xFD,
  Minf642 = 0xFD,
  Maxf642 = 0xFD,
  PMinf642 = 0xFD,
  PMaxf642 = 0xFD,

  TruncSatf324s = 0xFD,
  TruncSatf324u = 0xFD,
  Converti324s = 0xFD,
  Converti324u = 0xFD,
  TruncSatf642s0 = 0xFD,
  TruncSatf642u0 = 0xFD,
  ConvertLowi324s = 0xFD,
  ConvertLowi324u = 0xFD,
  Demotef6420 = 0xFD,
  PromoteLowf324 = 0xFD

}