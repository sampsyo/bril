[package]
name = "bril-rs"
version = "0.1.0"
authors = ["Patrick LaFontaine <32135464+Pat-Lafon@users.noreply.github.com>"]
edition = "2021"
description = "A rust representation of the Bril language"
readme = "README.md"
repository = "https://github.com/sampsyo/bril"
license-file = "../LICENSE"
categories = ["command-line-utilities", "compilers", "data-structures", "parser-implementations"]
keywords = ["compiler", "bril", "parser", "data-structures", "language"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
thiserror = "1.0"
serde_json = "1.0"
serde = { version = "1.0", features = ["derive"] }

[features]
float = []
memory = []
ssa = []
speculate = []
position = []
import = []
char = []

[[example]]
name = "bril2txt"
path = "examples/bril2txt.rs"
# I would like these features to be included by default using `features = ["memory", "float", "ssa", "speculate"]`
# However this currently does not work as expected and is being hashed out in https://github.com/rust-lang/rfcs/pull/3020 and https://github.com/rust-lang/rfcs/pull/2887
# Until a solution is reached, I'm using `required-features` so that these features must be passed by flag. This is less ergonomic at the moment, however the user will get a nicer error that they need a feature flag instead of an Result::unwrap() error.
# Note: See dev-dependencies for a hack to not need the user to pass that feature flag.
required-features = ["memory", "float", "ssa", "speculate", "position", "import", "char"]

[dev-dependencies]
# trick to enable all features in test
# This is actually really hacky because it is used in all tests/examples/benchmarks but since we currently only have one example this works for enabling the following feature flags for our users.
# If the above rfcs every get resolved, then dev-dependencies will no longer be needed.
bril-rs = { path = ".", features = ["memory", "float", "ssa", "speculate", "position", "import", "char"] }
